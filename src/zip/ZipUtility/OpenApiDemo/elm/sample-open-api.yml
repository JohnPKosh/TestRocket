openapi: 3.0.2
info:
  title: API Title
  description: Single or multi-line description in
    [CommonMark](http://commonmark.org/help/) or HTML.
  version: "1.0"
servers:
  - url: https://api.server.test/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
paths:
  "/test/{id}/":
    get:
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
          required: true
        - in: header
          name: erx-data-cts
          schema:
            type: string
          description: Primary
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      responses:
        "200":
          description: The response was successfully completed
          content:
            text/plain:
              schema:
                type: string
                example: pong
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /test?id=1234:
    get:
      summary: Returns a list of users.
      description: Optional extended description in `CommonMark` or HTML
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: The user ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfUsers"
            application/xml:
              schema:
                $ref: "#/components/schemas/ArrayOfUsers"
            text/plain:
              schema:
                type: string
  /users:
    post:
      summary: Adds a new user
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
              example:   # Sample object
                id: 10
                name: Jessica Smith
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'   # Reference to an object
              example: 
                # Properties of the referenced object
                id: 10
                name: Jessica Smith
  /people:
    post:
      summary: Gets a filtered list of people by PeopleFilterRequest
      requestBody:
        description: Gets a filtered list of people using the supplied `firstName` and `lastName` properties in the PeopleFilterRequest.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeopleFilterRequest'
      responses:
        "200":
          description: Returns an array of people objects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfPeople"
components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
# Error Components
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
# Additional components see https://swagger.io/docs/specification/data-models/data-types/
    ArrayOfUsers:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
          message:
            type: string
        required:
          - code
          - message
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    PeopleFilterRequest:
      type: object
      properties:
        firstName: 
          type: string
          minLength: 1
          maxLength: 50
          example: G*
        lastName: 
          type: string
          minLength: 1
          maxLength: 50
          example: Jetson
      required:
        - firstName
        - lastName
    ArrayOfPeople:
      type: array
      items:
        type: object
        properties:
          dateOfBirth:
            type: string
            format: date-time
          firstName:
            type: string
            minLength: 1
            maxLength: 50
            example: George
          lastName:
            type: string
            minLength: 1
            maxLength: 50
            example: Jetson
          middleInitial:
            type: string
            minLength: 1
            maxLength: 1
            nullable: true
            example: Z
          middleName:
            type: string
            minLength: 1
            maxLength: 50
            nullable: true
            example: Zulu
          nickName:
            type: string
            nullable: true
            example:
          numberOfDependants:
            type: integer
            nullable: true
            minimum: 0
            maximum: 99
            example: 2
        required:
          - dateOfBirth
          - firstName
          - lastName

# Media type samples

#application/json
#application/xml
#application/x-www-form-urlencoded
#multipart/form-data
#text/plain; charset=utf-8
#text/html
#application/pdf
#image/png
#application/vnd.mycompany.myapp.v2+json
#application/vnd.ms-excel
#application/vnd.openstreetmap.data+xml
#application/vnd.github-issue.text+json
#application/vnd.github.v3.diff
#image/vnd.djvu